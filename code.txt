index.js

const { Client, GatewayIntentBits, Collection, Options } = require("discord.js");
const fs = require("fs");
const path = require("path");
const config = require("./config.json");

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildVoiceStates,
    GatewayIntentBits.GuildMessageReactions,
    GatewayIntentBits.GuildIntegrations,
  ],
  makeCache: Options.cacheWithLimits({
    GuildMemberManager: { maxSize: 10000 },
  }),
});

client.queues = new Collection();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
function getFilesRecursively(dirPath, fileList = [], fileExtension = ".js") {
  const files = fs.readdirSync(dirPath);
  for (const file of files) {
    const filePath = path.join(dirPath, file);
    if (fs.statSync(filePath).isDirectory()) {
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
      getFilesRecursively(filePath, fileList, fileExtension);
    } else if (filePath.endsWith(fileExtension)) {
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞
      fileList.push(filePath);
    }
  }
  return fileList;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥
client.commands = new Collection();
const commandsPath = path.join(__dirname, "commands");
const commandFiles = getFilesRecursively(commandsPath);

for (const filePath of commandFiles) {
  const command = require(filePath);
  if (command.data && command.data.name) {
    client.commands.set(command.data.name, command);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
const eventsPath = path.join(__dirname, "events");
const eventFiles = getFilesRecursively(eventsPath);

for (const filePath of eventFiles) {
  const event = require(filePath);
  if (event.name && typeof event.execute === "function") {
    client.on(event.name, (...args) => event.execute(...args));
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
client.login(config.token);


database.js
// database.js
const sqlite3 = require("sqlite3").verbose();
const db = new sqlite3.Database("./transport.db");

db.serialize(() => {
  // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  db.run(`
        CREATE TABLE IF NOT EXISTS transport (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            fuel INTEGER DEFAULT 100,
            status TEXT DEFAULT '–°–≤–æ–±–æ–¥–Ω–∞',
            user TEXT DEFAULT NULL,
            updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
            handledBy TEXT DEFAULT NULL
        )
    `);

  // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∑–∞—è–≤–æ–∫ –≤ —Å–µ–º—å—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  db.run(`
        CREATE TABLE IF NOT EXISTS applications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            userId TEXT,
            channelId TEXT,
            messageId TEXT,
            nameSurname TEXT,
            oocInfo TEXT,
            familyHistory TEXT DEFAULT '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            onlineTime TEXT,
            familyReason TEXT,
            createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
            status TEXT DEFAULT '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
            handledBy TEXT
        )
    `);
});

module.exports = db;

utils\updateFamilyEmbed.js
const { EmbedBuilder } = require('discord.js');
const config = require('../config.json');

module.exports = async function updateFamilyEmbed(client) {
    const familyChannel = await client.channels.fetch(config.channels.family);
    if (!familyChannel) {
        console.error('–ö–∞–Ω–∞–ª —Å–æ—Å—Ç–∞–≤–∞ —Å–µ–º—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
    let familyMessage;
    try {
        const messages = await familyChannel.messages.fetch({ limit: 10 });
        familyMessage = messages.find(msg => msg.author.id === client.user.id);
        if (!familyMessage) {
            familyMessage = await familyChannel.send({ embeds: [new EmbedBuilder().setTitle("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ–º—å–∏...")] });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞:', error);
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≥–∏–ª—å–¥–∏—é –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–æ–ª–µ–π
    const guild = client.guilds.cache.get(config.guildId);
    if (!guild) {
        console.error('–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return;
    }
    await guild.members.fetch(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫—ç—à

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ –∏ –æ—Ç–¥–µ–ª—ã
    const rolesData = {
        leadership: [
            { title: "–†—É–∫–æ–≤–æ–¥—è—â–∏–π —Å–æ—Å—Ç–∞–≤", name: "–î–∞ –í–∏–Ω—á–∏", roleId: "1285763713428623462" },
            { name: "–°–∞–ª–∞–π", roleId: "1285764055558258721" }
        ],
        senior: [
            { title: "–°—Ç–∞—Ä—à–∏–π —Å–æ—Å—Ç–∞–≤", name: "–í–µ—Ä—Ä–æ–∫–∫—å–æ", roleId: "1305602385674113035" },
            { name: "–ë–æ—Ç—Ç–∏—á–µ–ª–ª–∏", roleId: "1305602443031220295" }
        ],
        main: [
            { title: "–û—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤", name: "–ú–∏–∫–µ–ª–∞–Ω–¥–∂–µ–ª–æ", roleId: "1305602518901850252" },
            { name: "–†–∞—Ñ–∞—ç–ª—å", roleId: "1305602578645782569" }
        ],
        academy: [
            { title: "–ê–∫–∞–¥–µ–º–∏—è", name: "–£—á–µ–Ω–∏–∫–∏", roleId: "1305602649273663528" },
            { name: "–ü–æ–¥–º–∞—Å—Ç–µ—Ä—å—è", roleId: "1305602681733382205" }
        ]
    };
    const departments = {
        "1305610127801323602": "–†–ï–ì",
        "1305610165684535356": "–°–ü–û",
        "1305610239596429405": "–ò–ù–¢",
        "1305610264523178015": "–ö–ê–ó"
    };

    // –°–æ–∑–¥–∞–µ–º embed-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞
    const embeds = [];
    
    // 1-–π embed: –°–æ—Å—Ç–∞–≤ —Å–µ–º—å–∏ —Å timestamp
    const familyEmbed = new EmbedBuilder()
        .setTitle("–°–æ—Å—Ç–∞–≤ —Å–µ–º—å–∏")
        .setColor(0x0099ff)
        .setTimestamp(); // –¥–æ–±–∞–≤–ª—è–µ–º timestamp

    embeds.push(familyEmbed);

    // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã
    const addedUsers = new Set();

    // –°–æ–∑–¥–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–º–±–µ–¥-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞
    for (const [section, roles] of Object.entries(rolesData)) {
        const embed = new EmbedBuilder()
            .setTitle(roles[0].title)
            .setColor(0x0099ff); // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç, –±–µ–∑ timestamp

        for (const roleData of roles) {
            const role = guild.roles.cache.get(roleData.roleId);
            const members = role ? role.members.map(member => {
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π —Ä–∞–∑–¥–µ–ª, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å—é–¥–∞
                if (addedUsers.has(member.id)) {
                    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö
                addedUsers.add(member.id);

                const departmentPrefix = Object.keys(departments).find(deptRole => member.roles.cache.has(deptRole));
                return `${departmentPrefix ? `${departments[departmentPrefix]} ` : ''}<@${member.id}>`;
            }).filter(Boolean) : []; // –£–±–∏—Ä–∞–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è

            embed.addFields({
                name: roleData.name,
                value: members.length ? members.join('\n') : '–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
                inline: false
            });
        }

        embeds.push(embed);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try {
        await familyMessage.edit({ embeds });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞:', error);
    }
};


utils\updateTransportChannel.js
// utils/updateTransportChannel.js
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const db = require('../database.js');
const config = require('../config.json');

module.exports = async function updateTransportEmbed(client) {
    const transportChannel = await client.channels.fetch(config.channels.transport);
    if (!transportChannel) {
        console.error('–ö–∞–Ω–∞–ª —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
    }

    db.all('SELECT * FROM transport', [], (err, rows) => {
        if (err) {
            console.error(err);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
        if (rows.length === 0) {
            const embed = new EmbedBuilder()
                .setColor(0x0099ff)
                .setTitle('–£—á–µ—Ç –∞–≤—Ç–æ')
                .setDescription('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–µ—Ç—É.')
                .setTimestamp();

            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('take_transport_button')
                        .setLabel('üöó –í–∑—è—Ç—å –∞–≤—Ç–æ')
                        .setStyle(ButtonStyle.Success)
                        .setDisabled(true),
                    new ButtonBuilder()
                        .setCustomId('return_transport_button')
                        .setLabel('üöô –°–¥–∞—Ç—å –∞–≤—Ç–æ')
                        .setStyle(ButtonStyle.Danger)
                        .setDisabled(true)
                );

            transportChannel.messages.fetch().then(messages => {
                const transportMessage = messages.find(msg => msg.author.id === client.user.id && msg.embeds.length > 0 && msg.embeds[0].title === '–£—á–µ—Ç –∞–≤—Ç–æ');
                if (transportMessage) {
                    transportMessage.edit({ embeds: [embed], components: [row] });
                } else {
                    transportChannel.send({ embeds: [embed], components: [row] });
                }
            }).catch(err => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:', err);
            });

            return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–µ—Ç
        }

        // –°–æ–∑–¥–∞–µ–º embed —Å id –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–∞—à–∏–Ω—ã, –∞ —Ç–∞–∫–∂–µ —Å—Ç–∞—Ç—É—Å–æ–º
        const embed = new EmbedBuilder()
            .setColor(0x0099ff)
            .setTitle('–£—á–µ—Ç –∞–≤—Ç–æ')
            .setTimestamp()
            .addFields(rows.map(transport => {
                // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                const dateOptions = {
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit',
                    hour12: false // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ 12-—á–∞—Å–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                };
                const formattedDate = new Date(transport.updatedAt).toLocaleString('ru-RU', dateOptions);

                return {
                    name: `${transport.id}. ${transport.name}`, // id –º–∞—à–∏–Ω—ã –∏ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ
                    value: transport.status === '–°–≤–æ–±–æ–¥–Ω–∞' ? '‚úÖ –°–≤–æ–±–æ–¥–Ω–æ' : `‚ùå –ó–∞–Ω—è—Ç–æ ${formattedDate}\n–ö–µ–º –∑–∞–Ω—è—Ç–æ: <@${transport.user}>`
                };
            }));

        const takeButton = new ButtonBuilder()
            .setCustomId('take_transport_button')
            .setLabel('üöó –í–∑—è—Ç—å –∞–≤—Ç–æ')
            .setStyle(ButtonStyle.Success); // –ó–µ–ª—ë–Ω–∞—è –∫–Ω–æ–ø–∫–∞

        const returnButton = new ButtonBuilder()
            .setCustomId('return_transport_button')
            .setLabel('üöô –°–¥–∞—Ç—å –∞–≤—Ç–æ')
            .setStyle(ButtonStyle.Danger); // –ö—Ä–∞—Å–Ω–∞—è –∫–Ω–æ–ø–∫–∞

        const row = new ActionRowBuilder().addComponents(takeButton, returnButton);

        transportChannel.messages.fetch().then(messages => {
            const transportMessage = messages.find(msg => msg.author.id === client.user.id && msg.embeds.length > 0 && msg.embeds[0].title === '–£—á–µ—Ç –∞–≤—Ç–æ');
            if (transportMessage) {
                transportMessage.edit({ embeds: [embed], components: [row] });
            } else {
                transportChannel.send({ embeds: [embed], components: [row] });
            }
        }).catch(err => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:', err);
        });
    });
};

handlers\famqHandler.js
const { PermissionsBitField, ButtonBuilder, ButtonStyle, ActionRowBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, EmbedBuilder } = require('discord.js');
const db = require('../database');
const config = require('../config.json');

module.exports = async function(interaction) {
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: ${interaction.type}`); // –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∏–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    if (interaction.isCommand() && interaction.commandName === 'famq') {
        console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: ${interaction.commandName}`);

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ ID
        const channel = await interaction.guild.channels.fetch('1286027066457723002');

        // –°–æ–∑–¥–∞–Ω–∏–µ embed —Å–æ–æ–±—â–µ–Ω–∏—è
        const embed = new EmbedBuilder()
            .setColor(0x0099ff)
            .setTitle('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ —Å–µ–º—å—é')
            .setDescription('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É.');

        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
        const button = new ButtonBuilder()
            .setCustomId('open_application_modal')
            .setLabel('–ó–∞—è–≤–∫–∞')
            .setStyle(ButtonStyle.Primary);

        const row = new ActionRowBuilder().addComponents(button);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
        await channel.send({ embeds: [embed], components: [row] });

        // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await interaction.reply({ content: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!', ephemeral: true });

    } else if (interaction.isButton()) {
        console.log(`–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: ${interaction.customId}`); // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        
        if (interaction.customId === 'open_application_modal') {
            // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
            const modal = new ModalBuilder()
                .setCustomId('application_modal')
                .setTitle('–ó–∞—è–≤–∫–∞ –≤ —Å–µ–º—å—é');

            const nameField = new TextInputBuilder()
                .setCustomId('name_surname')
                .setLabel('–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è (IC)')
                .setStyle(TextInputStyle.Short)
                .setRequired(true);

            const oocField = new TextInputBuilder()
                .setCustomId('ooc_info')
                .setLabel('–í–∞—à–µ –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç (OOC)')
                .setStyle(TextInputStyle.Short)
                .setRequired(true);

            const historyField = new TextInputBuilder()
                .setCustomId('family_history')
                .setLabel('–í –∫–∞–∫–∏—Ö —Å–µ–º—å—è—Ö —Å–æ—Å—Ç–æ—è–ª–∏ —Ä–∞–Ω–µ–µ')
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(true);

            const onlineField = new TextInputBuilder()
                .setCustomId('online_time')
                .setLabel('–í–∞—à —Å—Ä–µ–¥–Ω–∏–π –æ–Ω–ª–∞–π–Ω')
                .setStyle(TextInputStyle.Short)
                .setRequired(true);

            const reasonField = new TextInputBuilder()
                .setCustomId('family_reason')
                .setLabel('–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Å–µ–º—å—é?')
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(true);

            const firstRow = new ActionRowBuilder().addComponents(nameField);
            const secondRow = new ActionRowBuilder().addComponents(oocField);
            const thirdRow = new ActionRowBuilder().addComponents(historyField);
            const fourthRow = new ActionRowBuilder().addComponents(onlineField);
            const fifthRow = new ActionRowBuilder().addComponents(reasonField);

            modal.addComponents(firstRow, secondRow, thirdRow, fourthRow, fifthRow);
            console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ...');
            await interaction.showModal(modal);
        } else if (interaction.customId.startsWith('delete_application_')) {
            console.log(`–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: ${interaction.customId}`);
            const applicantId = interaction.customId.split('_')[2];

            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä –º–æ–≥—É—Ç —É–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É
            if (interaction.user.id !== applicantId && !interaction.member.roles.cache.has(config.roles.director) && !interaction.member.roles.cache.has(config.roles.depDirector)) {
                return interaction.reply({ content: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–π –∞–Ω–∫–µ—Ç—ã.', ephemeral: true });
            }

            const applicationChannelId = interaction.channel.id;

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            db.get(`SELECT * FROM applications WHERE channelId = ?`, [applicationChannelId], async (err, row) => {
                if (err) {
                    console.error(err);
                    return interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏.', ephemeral: true });
                }

                if (!row) {
                    return interaction.reply({ content: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', ephemeral: true });
                }

                // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∑–∞—è–≤–∫—É –≤ –∞—Ä—Ö–∏–≤
                const archiveChannel = await interaction.guild.channels.cache.find(channel => channel.name === '–∞—Ä—Ö–∏–≤') || 
                    await interaction.guild.channels.create({
                        name: '–∞—Ä—Ö–∏–≤',
                        type: 0, // —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
                        permissionOverwrites: [
                            {
                                id: interaction.guild.roles.everyone,
                                deny: [PermissionsBitField.Flags.ViewChannel]
                            }
                        ]
                    });

                // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã –≤ –∞—Ä—Ö–∏–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                const archivedEmbed = {
                    color: 0x0099ff,
                    title: `–ó–∞—è–≤–∫–∞ –æ—Ç ${row.userId}`,
                    fields: [
                        { name: '–ò–º—è —Ñ–∞–º–∏–ª–∏—è (IC)', value: row.nameSurname },
                        { name: '–í–∞—à–µ –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç (OOC)', value: row.oocInfo },
                        { name: '–í –∫–∞–∫–∏—Ö —Å–µ–º—å—è—Ö —Å–æ—Å—Ç–æ—è–ª–∏ —Ä–∞–Ω–µ–µ', value: row.familyHistory },
                        { name: '–í–∞—à —Å—Ä–µ–¥–Ω–∏–π –æ–Ω–ª–∞–π–Ω –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å', value: row.onlineTime },
                        { name: '–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –∫ –Ω–∞–º?', value: row.familyReason }
                    ],
                    footer: { text: `–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${interaction.user.username}` },
                    timestamp: new Date()
                };
                await archiveChannel.send({ embeds: [archivedEmbed] });

                // –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                db.run(`DELETE FROM applications WHERE channelId = ?`, [applicationChannelId], (err) => {
                    if (err) {
                        console.error(err);
                    }
                });

                // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∑–∞—è–≤–∫–∏
                await interaction.channel.delete();
            });
        }

    } else if (interaction.isModalSubmit() && interaction.customId === 'application_modal') {
        console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞—Ç–∞...'); // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞

        await interaction.deferReply({ ephemeral: true });

        const nameSurname = interaction.fields.getTextInputValue('name_surname');
        const oocInfo = interaction.fields.getTextInputValue('ooc_info');
        const familyHistory = interaction.fields.getTextInputValue('family_history');
        const onlineTime = interaction.fields.getTextInputValue('online_time');
        const familyReason = interaction.fields.getTextInputValue('family_reason');

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∑–∞—è–≤–∫–∏
        const applicationChannel = await interaction.guild.channels.create({
            name: `–∑–∞—è–≤–∫–∞-${interaction.user.username}`,
            parent: config.categories.applications,
            permissionOverwrites: [
                {
                    id: interaction.user.id,
                    allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages]
                },
                {
                    id: config.roles.family,
                    allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages]
                },
                {
                    id: interaction.guild.roles.everyone,
                    deny: [PermissionsBitField.Flags.ViewChannel]
                }
            ]
        });

        const embed = new EmbedBuilder()
            .setColor(0x0099ff)
            .setTitle(`–ó–∞—è–≤–∫–∞ –æ—Ç ${interaction.user.username}`)
            .addFields(
                { name: '–ò–º—è —Ñ–∞–º–∏–ª–∏—è (IC)', value: nameSurname },
                { name: '–í–∞—à–µ –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç (OOC)', value: oocInfo },
                { name: '–í –∫–∞–∫–∏—Ö —Å–µ–º—å—è—Ö —Å–æ—Å—Ç–æ—è–ª–∏ —Ä–∞–Ω–µ–µ', value: familyHistory },
                { name: '–í–∞—à —Å—Ä–µ–¥–Ω–∏–π –æ–Ω–ª–∞–π–Ω –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å', value: onlineTime },
                { name: '–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –∫ –Ω–∞–º?', value: familyReason }
            )
            .setTimestamp();

        // –û—Ç–ø—Ä–∞–≤–∫–∞ embed –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
        const deleteButton = new ButtonBuilder()
            .setCustomId(`delete_application_${interaction.user.id}`)
            .setLabel('–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É')
            .setStyle(ButtonStyle.Danger);

        const row = new ActionRowBuilder().addComponents(deleteButton);
        const applicationMessage = await applicationChannel.send({ content: "<@&1286027244548128973>", embeds: [embed], components: [row] });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
        await applicationMessage.react('‚úîÔ∏è');
        await applicationMessage.react('‚ùå');

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ
        db.run(`INSERT INTO applications (userId, channelId, messageId, nameSurname, oocInfo, familyHistory, onlineTime, familyReason) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`, 
            [interaction.user.id, applicationChannel.id, applicationMessage.id, nameSurname, oocInfo, familyHistory, onlineTime, familyReason]);

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await interaction.followUp({ content: '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', ephemeral: true });
    }
};

handlers\mafiaHandler.js
const {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  EmbedBuilder,
  StringSelectMenuBuilder,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
} = require("discord.js");
const {
  updateMainMessage,
  getMainMessageId,
  setMainMessageId,
} = require("../mafia/updateMainMessage");
const config = require("../config.json");
const db = require("../database");

let selectedMode = "classic";
let isBalanceGame = false;
let betAmount = 0;
let players = new Set();
let registrationOpen = true;

async function getUserBalance(userId) {
  return new Promise((resolve, reject) => {
    db.get(
      "SELECT balance FROM economy WHERE userId = ?",
      [userId],
      (err, row) => {
        if (err) return reject(err);
        resolve(row ? row.balance : 0); // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∏–ª–∏ 0, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
      }
    );
  });
}

module.exports = {
  async handleInteraction(interaction) {
    const { customId } = interaction;

    if (customId === "start_game") {
      if (!isHost(interaction)) {
        return interaction.reply({
          content: "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.",
          ephemeral: true,
        });
      }
      await sendModeSelection(interaction);
    }

    if (customId === "cancel_registration") {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –≤–µ–¥—É—â–∏–π
      if (!isHost(interaction)) {
        return interaction.reply({
          content: "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–±–æ—Ä–∞.",
          ephemeral: true,
        });
      }

      // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –Ω–∞–±–æ—Ä
      players.clear();
      registrationOpen = false;

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      await updateMainMessage(interaction.client, {
        embeds: [
          new EmbedBuilder()
            .setTitle("–ú–∞—Ñ–∏—è - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
            .setDescription("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
            .setColor(0x00ff00),
        ],
        components: [
          new ActionRowBuilder().addComponents(
            new ButtonBuilder()
              .setCustomId("start_game")
              .setLabel("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
              .setStyle(ButtonStyle.Primary)
          ),
        ],
      });

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–º–µ–Ω—É –Ω–∞–±–æ—Ä–∞
      await interaction.reply({
        content: "–ù–∞–±–æ—Ä –Ω–∞ –∏–≥—Ä—É –æ—Ç–º–µ–Ω–µ–Ω.",
        ephemeral: true,
      });
    }

    if (customId === "select_mode") {
      selectedMode = interaction.values[0];
      await interaction.update({
        embeds: [
          new EmbedBuilder()
            .setDescription("–ò–≥—Ä–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å?")
            .setColor(0x00ff00),
        ],
        components: [
          new ActionRowBuilder().addComponents(
            new ButtonBuilder()
              .setCustomId("balance_yes")
              .setLabel("–î–∞")
              .setStyle(ButtonStyle.Success),
            new ButtonBuilder()
              .setCustomId("balance_no")
              .setLabel("–ù–µ—Ç")
              .setStyle(ButtonStyle.Secondary)
          ),
        ],
      });
    }

    if (customId === "balance_yes" || customId === "balance_no") {
      isBalanceGame = customId === "balance_yes";
      if (isBalanceGame) {
        await showBetAmountModal(interaction);
      } else {
        await startGameSetup(interaction, "–ù–µ—Ç");
        await interaction.reply({
          content: "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É –±–µ–∑ –±–∞–ª–∞–Ω—Å–∞.",
          ephemeral: true,
        });
      }
    }

    if (customId === "enter_bet") {
      const bet = parseInt(
        interaction.fields.getTextInputValue("bet_amount"),
        10
      );
      if (isNaN(bet) || bet <= 0) {
        return interaction.reply({
          content: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.",
          ephemeral: true,
        });
      }
      betAmount = bet;
      await startGameSetup(interaction, betAmount);
      await interaction.reply({
        content: `–ò–≥—Ä–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º ${betAmount} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.`,
        ephemeral: true,
      });
    }

    if (customId === "register") {
      if (isBalanceGame) {
        const userBalance = await getUserBalance(interaction.user.id);

        if (userBalance < betAmount) {
          return interaction.reply({
            content: "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            ephemeral: true,
          });
        }
      }

      if (!players.has(interaction.user.id)) {
        players.add(interaction.user.id);
        await interaction.reply({
          content: "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.",
          ephemeral: true,
        });
      } else {
        players.delete(interaction.user.id);
        await interaction.reply({
          content: "–í—ã —Å–Ω—è–ª–∏ —Å–≤–æ—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
          ephemeral: true,
        });
      }

      const modeName = await getModeName(selectedMode); // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
      const requiredPlayers = await getRequiredPlayersForMode(selectedMode); // –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤

      await updateMainMessage(
        interaction.client,
        createMainEmbed(
          "–ù–∞–±–æ—Ä –æ—Ç–∫—Ä—ã—Ç",
          modeName,
          requiredPlayers,
          isBalanceGame ? betAmount : "–ù–µ—Ç"
        )
      );
    }

    if (customId === "toggle_registration") {
      registrationOpen = !registrationOpen;
      const status = registrationOpen ? "–ù–∞–±–æ—Ä –æ—Ç–∫—Ä—ã—Ç" : "–ù–∞–±–æ—Ä –∑–∞–∫—Ä—ã—Ç";
      const modeName = await getModeName(selectedMode); // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞

      await updateMainMessage(
        interaction.client,
        createMainEmbed(
          status,
          modeName,
          await getRequiredPlayersForMode(selectedMode),
          isBalanceGame ? betAmount : "–ù–µ—Ç"
        )
      );

      await interaction.reply({
        content: `–ù–∞–±–æ—Ä ${registrationOpen ? "–æ—Ç–∫—Ä—ã—Ç" : "–∑–∞–∫—Ä—ã—Ç"}.`,
        ephemeral: true,
      });
    }

    if (customId === "confirm_start") {
      const gameStatus = "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å";
      const modeName = await getModeName(selectedMode);
      const modeFile = require(`../mafia/mode/${selectedMode}`);
      await modeFile.start(interaction, Array.from(players), isBalanceGame, betAmount);
      gameActive = true;
      await updateMainMessage(interaction.client, {
        embeds: [
          new EmbedBuilder()
            .setTitle("–ú–∞—Ñ–∏—è - –ò–≥—Ä–∞ –∏–¥–µ—Ç")
            .setDescription(
              `–†–µ–∂–∏–º: ${selectedMode}\n` +
                `–ò–≥—Ä–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å: ${isBalanceGame ? betAmount : "–ù–µ—Ç"}\n` +
                `–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:\n${Array.from(players)
                  .map((id) => `<@${id}>`)
                  .join("\n")}`
            )
            .setColor(0xff0000), // –¶–≤–µ—Ç –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞ —Å–≤–æ–π –≤–∫—É—Å
        ],
        components: [], // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
      });
      await interaction.reply({ content: "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!", ephemeral: true });
    }
  },
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–µ–¥—É—â–µ–≥–æ
function isHost(interaction) {
  return (
    interaction.member.roles.cache.has(config.roles.host) ||
    interaction.member.permissions.has("ADMINISTRATOR")
  );
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
async function sendModeSelection(interaction) {
  await interaction.reply({
    embeds: [
      new EmbedBuilder()
        .setDescription("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:")
        .setColor(0x00ff00),
    ],
    components: [
      new ActionRowBuilder().addComponents(
        new StringSelectMenuBuilder()
          .setCustomId("select_mode")
          .setPlaceholder("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º")
          .addOptions([
            { label: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", value: "classic" },
            { label: "Test", value: "test" },
          ])
      ),
    ],
    ephemeral: true,
  });
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏
async function showBetAmountModal(interaction) {
  const modal = new ModalBuilder()
    .setCustomId("enter_bet")
    .setTitle("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏")
    .addComponents(
      new ActionRowBuilder().addComponents(
        new TextInputBuilder()
          .setCustomId("bet_amount")
          .setLabel("–°—É–º–º–∞")
          .setStyle(TextInputStyle.Short)
          .setRequired(true)
      )
    );

  await interaction.showModal(modal);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function startGameSetup(interaction, balanceInfo) {
  const modeName = await getModeName(selectedMode); // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞
  const requiredPlayers = await getRequiredPlayersForMode(selectedMode); // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤

  await updateMainMessage(
    interaction.client,
    createMainEmbed("–ù–∞–±–æ—Ä –æ—Ç–∫—Ä—ã—Ç", modeName, requiredPlayers, balanceInfo)
  );
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ —Ä–µ–∂–∏–º–∞
async function getRequiredPlayersForMode(mode) {
  const modeFile = require(`../mafia/mode/${mode}`);
  return modeFile.requiredPlayers || 5; // –ï—Å–ª–∏ –≤ —Ñ–∞–π–ª–µ —Ä–µ–∂–∏–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5
}

async function getModeName(mode) {
  const modeFile = require(`../mafia/mode/${mode}`);
  return modeFile.name || mode; // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–∂–∏–º–∞
}
// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã
function createMainEmbed(
  status,
  modeName,
  requiredPlayers = 5,
  balanceInfo = isBalanceGame ? betAmount : "–ù–µ—Ç"
) {
  const playerList =
    Array.from(players)
      .map((playerId) => `<@${playerId}>`)
      .join("\n") || "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤";

  return {
    embeds: [
      new EmbedBuilder()
        .setTitle(`–ú–∞—Ñ–∏—è - ${status}`)
        .setDescription(
          `–†–µ–∂–∏–º: ${modeName}\n–ò–≥—Ä–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å: ${balanceInfo}\n–¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: ${requiredPlayers}\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:\n${playerList}`
        )
        .setColor(0x00ff00)
        .setTimestamp(),
    ],
    components: [
      new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId("confirm_start")
          .setLabel("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
          .setStyle(ButtonStyle.Success)
          .setDisabled(players.size < requiredPlayers),
        new ButtonBuilder()
          .setCustomId("register")
          .setLabel("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
          .setStyle(ButtonStyle.Primary)
          .setDisabled(!registrationOpen),
        new ButtonBuilder()
          .setCustomId("toggle_registration")
          .setLabel(registrationOpen ? "–ó–∞–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä" : "–û—Ç–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä")
          .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
          .setCustomId("cancel_registration")
          .setLabel("–û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–±–æ—Ä")
          .setStyle(ButtonStyle.Danger)
      ),
    ],
  };
}

events\ready\ready.js
const updateFamilyEmbed = require('../../utils/updateFamilyEmbed');

module.exports = {
  name: "ready",
  once: true,
  async execute(client) {
    console.log(`–ë–æ—Ç –≤–æ—à—ë–ª –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ ${client.user.tag}`);

    setTimeout(() => {
      updateFamilyEmbed(client);
      console.log('–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ–º—å–∏');
    }, 15000); // 15 —Å–µ–∫—É–Ω–¥

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç
    setInterval(() => {
      updateFamilyEmbed(client);
      console.log('–°–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ–º—å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
    }, 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

    // ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    const testServerId = "1285740105843216436";
    const guild = client.guilds.cache.get(testServerId);

    if (guild) {
      try {
        console.log(
          `–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ ${guild.name} (${guild.id})...`
        );

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ –∫–ª–∏–µ–Ω—Ç–µ
        const commandsArray = client.commands.map((command) =>
          command.data.toJSON()
        );

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ
        await guild.commands.set(commandsArray);

        console.log("–ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ.");
      } catch (error) {
        console.error(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ:",
          error
        );
      }
    } else {
      console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä —Å ID ${testServerId}.`);
    }
  },
};

events\interaction\interactionCreate.js
const famqHandler = require("../../handlers/famqHandler");
const setupTransportHandler = require("../../commands/transport/setup_transport");
const ticketInteractionHandler = require("./ticketInteraction"); // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

module.exports = {
  name: "interactionCreate",
  async execute(interaction) {
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: ${interaction.type}`); // –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (interaction.isCommand()) {
      const command = interaction.client.commands.get(interaction.commandName);
      if (!command) {
        console.log(`–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${interaction.commandName}`);
        return;
      }

      try {
        console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: ${interaction.commandName}`);
        await command.execute(interaction, interaction.client); // –ü–µ—Ä–µ–¥–∞–µ–º client –∑–¥–µ—Å—å
      } catch (error) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã ${interaction.commandName}:`,
          error
        );
        await interaction.reply({
          content: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.",
          ephemeral: true,
        });
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    if (interaction.isButton() || interaction.isModalSubmit()) {
      console.log(
        `–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º: ${interaction.customId}`
      );

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–∏–∫–µ—Ç–∞–º–∏
      if (
        interaction.customId === "create_ticket" ||
        interaction.customId === "close_ticket"
      ) {
        await ticketInteractionHandler.execute(interaction); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤
      } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
        if (interaction.customId.startsWith("delete_application_")) {
          await famqHandler(interaction);
        } else if (
          interaction.customId.startsWith("open_application_modal") ||
          interaction.customId.startsWith("application_modal")
        ) {
          await famqHandler(interaction);
        } else {
          await setupTransportHandler.handleInteraction(interaction);
        }
      }
    }
  },
};

events\interaction\ticketInteraction.js
const { ButtonBuilder, ActionRowBuilder, ButtonStyle, EmbedBuilder } = require('discord.js');
const fetch = (...args) =>
    import('node-fetch').then(({ default: fetch }) => fetch(...args));
const db = require('../../database');
const config = require('../../config.json');

module.exports = {
    name: 'ticketInteraction',
    async execute(interaction) {
        if (interaction.customId === 'create_ticket') {
            const ticketChannel = await interaction.guild.channels.create({
                name: `ticket-${interaction.user.username}`,
                parent: config.categories.ticketCategory,
                permissionOverwrites: [
                    {
                        id: interaction.guild.roles.everyone,
                        deny: ['ViewChannel'],
                    },
                    {
                        id: interaction.user.id,
                        allow: ['ViewChannel', 'SendMessages'],
                    },
                    {
                        id: config.roles.ticketManager,
                        allow: ['ViewChannel', 'SendMessages'],
                    },
                ],
            });

            const embed = new EmbedBuilder()
                .setColor('#0099ff')
                .setTitle('–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç')
                .setDescription(`–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º <@${interaction.user.id}>`);

            const closeButton = new ButtonBuilder()
                .setCustomId('close_ticket')
                .setLabel('–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç')
                .setStyle(ButtonStyle.Danger);

            const row = new ActionRowBuilder().addComponents(closeButton);

            await ticketChannel.send({ embeds: [embed], components: [row] });

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞
            const userEmbed = new EmbedBuilder()
                .setColor('#0099ff')
                .setTitle('–í–∞—à —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω')
                .setDescription(`–í–∞—à —Ç–∏–∫–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç.`);

            const openTicketButton = new ButtonBuilder()
                .setLabel('–û—Ç–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç')
                .setURL(ticketChannel.url)
                .setStyle(ButtonStyle.Link);

            const userRow = new ActionRowBuilder().addComponents(openTicketButton);

            await interaction.user.send({ embeds: [userEmbed], components: [userRow] });

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª —Å —É–∫–∞–∑–∞–Ω–∏–µ–º, –∫—Ç–æ –æ—Ç–∫—Ä—ã–ª —Ç–∏–∫–µ—Ç
            const logEmbed = new EmbedBuilder()
                .setColor('#0099ff')
                .setTitle('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç')
                .addFields(
                    { name: '–ö—Ç–æ —Å–æ–∑–¥–∞–ª —Ç–∏–∫–µ—Ç', value: `<@${interaction.user.id}>`, inline: true }
                )
                .setTimestamp();

            const logChannel = await interaction.guild.channels.fetch(config.channels.ticketLog);
            await logChannel.send({ embeds: [logEmbed] });
        } else if (interaction.customId === 'close_ticket') {
            const ticketChannel = interaction.channel;

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Pastebin
            const messages = await ticketChannel.messages.fetch({ limit: 100 });
            const logContent = messages
                .filter(msg => !msg.author.bot)
                .map(msg => `${new Date(msg.createdTimestamp).toLocaleString()} - ${msg.author.username}: ${msg.content}`)
                .reverse()
                .join('\n') || 'No messages sent in the ticket.';

            const pasteResponse = await fetch('https://pastebin.com/api/api_post.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: new URLSearchParams({
                    api_dev_key: config.pastebin.apiKey,
                    api_option: 'paste',
                    api_paste_code: logContent,
                    api_paste_name: `Ticket Logs - ${ticketChannel.name}`,
                    api_paste_private: '1', // –õ–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ —Å—Å—ã–ª–∫–µ
                }),
            });

            const pasteUrl = await pasteResponse.text();

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞ –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª
            const closeEmbed = new EmbedBuilder()
                .setColor('#FF0000')
                .setTitle('–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç')
                .addFields(
                    { name: '–ö—Ç–æ —Å–æ–∑–¥–∞–ª —Ç–∏–∫–µ—Ç', value: `<@${interaction.message.embeds[0].description.match(/<@(\d+)>/)[1]}>`, inline: true },
                    { name: '–ö—Ç–æ –∑–∞–∫—Ä—ã–ª —Ç–∏–∫–µ—Ç', value: `<@${interaction.user.id}>`, inline: true }
                )
                .setTimestamp();

            const logButton = new ButtonBuilder()
                .setLabel('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏')
                .setURL(pasteUrl)
                .setStyle(ButtonStyle.Link);

            const logRow = new ActionRowBuilder().addComponents(logButton);

            const logChannel = await interaction.guild.channels.fetch(config.channels.ticketLog);
            await logChannel.send({ embeds: [closeEmbed], components: [logRow] });

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞
            const userCloseEmbed = new EmbedBuilder()
                .setColor('#FF0000')
                .setTitle('–í–∞—à —Ç–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç')
                .addFields(
                    { name: '–ö—Ç–æ —Å–æ–∑–¥–∞–ª —Ç–∏–∫–µ—Ç', value: `<@${interaction.message.embeds[0].description.match(/<@(\d+)>/)[1]}>`, inline: true },
                    { name: '–ö—Ç–æ –∑–∞–∫—Ä—ã–ª —Ç–∏–∫–µ—Ç', value: `<@${interaction.user.id}>`, inline: true }
                );

            const userCloseRow = new ActionRowBuilder().addComponents(logButton);

            await interaction.user.send({ embeds: [userCloseEmbed], components: [userCloseRow] });

            // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç-–∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            await ticketChannel.send('–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç. –ö–∞–Ω–∞–ª –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.');
            setTimeout(() => ticketChannel.delete(), 5000);
        }
    },
};

events\interaction\voiceStateUpdate.js
// events/voiceStateUpdate.js
const { ChannelType } = require('discord.js');
const config = require('../../config.json');

module.exports = {
    name: 'voiceStateUpdate',
    async execute(oldState, newState) {
        const channelId = config.channels.voiceChannelId; // ID –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const categoryId = config.categories.voiceCategoryId; // ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
        const familyRoleId = config.roles.family; // ID —Ä–æ–ª–∏ —Å–µ–º—å–∏

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
        if (newState.channelId === channelId && !oldState.channelId) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
            const newChannel = await newState.guild.channels.create({
                name: `–ü—Ä–∏–≤–∞—Ç-${newState.member.user.username}`,
                type: ChannelType.GuildVoice,
                parent: categoryId, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                permissionOverwrites: [
                    {
                        id: newState.guild.id, // –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                        deny: ['ViewChannel'], // –ó–∞–ø—Ä–µ—â–∞–µ–º –¥–æ—Å—Ç—É–ø –≤—Å–µ–º
                    },
                    {
                        id: newState.member.id, // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è
                        allow: [
                            'ViewChannel',
                            'Connect',
                            'Speak',
                            'MuteMembers',
                            'DeafenMembers',
                            'MoveMembers',
                            'ManageChannels', // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º
                        ], // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
                    },
                    {
                        id: familyRoleId, // –†–æ–ª—å —Å–µ–º—å–∏
                        allow: ['ViewChannel', 'Connect', 'Speak'], // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è —Ä–æ–ª–∏ —Å–µ–º—å–∏
                    },
                ],
            });

            // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
            await newState.setChannel(newChannel);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å–≤–æ–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        if (oldState.channelId && oldState.channelId !== channelId && newState.channelId === null) {
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –≤ –≥–∏–ª—å–¥–∏–∏
            const voiceChannels = oldState.guild.channels.cache.filter(channel =>
                channel.type === ChannelType.GuildVoice &&
                channel.name === `–ü—Ä–∏–≤–∞—Ç-${oldState.member.user.username}`
            );

            // –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            voiceChannels.forEach(async (channel) => {
                await channel.delete();
                console.log(`–£–¥–∞–ª—ë–Ω –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª: ${channel.name}`);
            });
        }
    },
};

commands\transport\setup_transport.js
// commands/setup_transport.js
const {
    SlashCommandBuilder,
    ActionRowBuilder,
    ButtonBuilder,
    ButtonStyle,
    ModalBuilder,
    TextInputBuilder,
    TextInputStyle,
    EmbedBuilder,
} = require('discord.js');
const db = require('../../database');
const updateTransportEmbed = require('../../utils/updateTransportChannel');
const config = require('../../config.json');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('setup_transport')
        .setDescription('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞'),
    async execute(interaction) {
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('add_transport_button')
                    .setLabel('–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('delete_transport_button')
                    .setLabel('–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
                    .setStyle(ButtonStyle.Danger),
            );

        await interaction.reply({ content: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', components: [row], ephemeral: true });
    },

    async handleInteraction(interaction) {
        if (interaction.isButton()) {
            if (interaction.customId === 'add_transport_button') {
                const modal = new ModalBuilder()
                    .setCustomId('add_transport_modal')
                    .setTitle('–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç');

                const nameInput = new TextInputBuilder()
                    .setCustomId('transport_name')
                    .setLabel('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞')
                    .setStyle(TextInputStyle.Short)
                    .setRequired(true);

                const fuelInput = new TextInputBuilder()
                    .setCustomId('transport_fuel')
                    .setLabel('–¢–æ–ø–ª–∏–≤–æ (–º–∞–∫—Å. 45 —Å–∏–º–≤–æ–ª–æ–≤)')
                    .setStyle(TextInputStyle.Short)
                    .setRequired(true)
                    .setMaxLength(45);

                modal.addComponents(
                    new ActionRowBuilder().addComponents(nameInput),
                    new ActionRowBuilder().addComponents(fuelInput)
                );

                await interaction.showModal(modal);
            } else if (interaction.customId === 'delete_transport_button') {
                const modal = new ModalBuilder()
                    .setCustomId('delete_transport_modal')
                    .setTitle('–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç');

                const idInput = new TextInputBuilder()
                    .setCustomId('transport_id')
                    .setLabel('ID —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞')
                    .setStyle(TextInputStyle.Short)
                    .setRequired(true);

                modal.addComponents(new ActionRowBuilder().addComponents(idInput));
                await interaction.showModal(modal);
            }
        } else if (interaction.isModalSubmit()) {
            if (interaction.customId === 'add_transport_modal') {
                const name = interaction.fields.getTextInputValue('transport_name');
                const fuel = parseInt(interaction.fields.getTextInputValue('transport_fuel'), 10);

                if (isNaN(fuel) || fuel < 0) {
                    return interaction.reply({ content: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–∞.', ephemeral: true });
                }

                // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
                db.get('SELECT MAX(id) AS maxId FROM transport', [], (err, row) => {
                    if (err) {
                        console.error(err);
                        return interaction.reply({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ ID.', ephemeral: true });
                    }

                    const newId = (row.maxId || 0) + 1; // –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–Ω–µ–º —Å 1

                    // –í—Å—Ç–∞–≤–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º ID
                    db.run('INSERT INTO transport (id, name, fuel, status) VALUES (?, ?, ?, ?)', [newId, name, fuel, '–°–≤–æ–±–æ–¥–Ω–∞'], function (err) {
                        if (err) {
                            console.error(err);
                            return interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.', ephemeral: true });
                        }

                        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º
                        updateTransportEmbed(interaction.client);
                        interaction.reply({ content: `–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç "${name}" –¥–æ–±–∞–≤–ª–µ–Ω —Å ID ${newId}.`, ephemeral: true });
                    });
                });
            } else if (interaction.customId === 'delete_transport_modal') {
                const transportId = parseInt(interaction.fields.getTextInputValue('transport_id'), 10);

                // –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                db.get('SELECT COUNT(*) as count FROM transport WHERE id = ?', [transportId], (err, result) => {
                    if (err) {
                        console.error(err);
                        return interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ID —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.', ephemeral: true });
                    }

                    if (result.count === 0) {
                        return interaction.reply({ content: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral: true });
                    }

                    db.run('DELETE FROM transport WHERE id = ?', [transportId], function (err) {
                        if (err) {
                            console.error(err);
                            return interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.', ephemeral: true });
                        }

                        // –°–¥–≤–∏–≥–∞–µ–º ID –¥–ª—è –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å ID –±–æ–ª—å—à–µ —É–¥–∞–ª—è–µ–º–æ–≥–æ
                        db.run('UPDATE transport SET id = id - 1 WHERE id > ?', [transportId], (err) => {
                            if (err) {
                                console.error(err);
                                return interaction.reply({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ID —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.', ephemeral: true });
                            }

                            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º
                            updateTransportEmbed(interaction.client);
                            interaction.reply({ content: `–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å ID ${transportId} —É–¥–∞–ª—ë–Ω.`, ephemeral: true });
                        });
                    });
                });
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è "–≤–∑—è—Ç—å –∞–≤—Ç–æ" –∏ "—Å–¥–∞—Ç—å –∞–≤—Ç–æ"
        if (interaction.isButton()) {
            if (interaction.customId === 'take_transport_button') {
                const modal = new ModalBuilder()
                    .setCustomId('take_transport_modal')
                    .setTitle('–í–∑—è—Ç—å –∞–≤—Ç–æ');

                const idInput = new TextInputBuilder()
                    .setCustomId('take_transport_id')
                    .setLabel('ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è')
                    .setStyle(TextInputStyle.Short)
                    .setRequired(true);

                const fuelInput = new TextInputBuilder()
                    .setCustomId('take_fuel')
                    .setLabel('–¢–æ–ø–ª–∏–≤–æ (—Å–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ)')
                    .setStyle(TextInputStyle.Short)
                    .setRequired(true)
                    .setMaxLength(45);

                modal.addComponents(
                    new ActionRowBuilder().addComponents(idInput),
                    new ActionRowBuilder().addComponents(fuelInput)
                );

                await interaction.showModal(modal);
            } else if (interaction.customId === 'return_transport_button') {
                const modal = new ModalBuilder()
                    .setCustomId('return_transport_modal')
                    .setTitle('–°–¥–∞—Ç—å –∞–≤—Ç–æ');

                const idInput = new TextInputBuilder()
                    .setCustomId('return_transport_id')
                    .setLabel('ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è')
                    .setStyle(TextInputStyle.Short)
                    .setRequired(true);

                const fuelInput = new TextInputBuilder()
                    .setCustomId('return_fuel')
                    .setLabel('–¢–æ–ø–ª–∏–≤–æ (—Å–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ)')
                    .setStyle(TextInputStyle.Short)
                    .setRequired(true)
                    .setMaxLength(45);

                modal.addComponents(
                    new ActionRowBuilder().addComponents(idInput),
                    new ActionRowBuilder().addComponents(fuelInput)
                );

                await interaction.showModal(modal);
            }
        } else if (interaction.isModalSubmit()) {
            if (interaction.customId === 'take_transport_modal') {
                const transportId = parseInt(interaction.fields.getTextInputValue('take_transport_id'), 10);
                const currentFuel = parseInt(interaction.fields.getTextInputValue('take_fuel'), 10);
                await takeTransport(interaction, transportId, currentFuel);
            } else if (interaction.customId === 'return_transport_modal') {
                const transportId = parseInt(interaction.fields.getTextInputValue('return_transport_id'), 10);
                const currentFuel = parseInt(interaction.fields.getTextInputValue('return_fuel'), 10);
                await returnTransport(interaction, transportId, currentFuel);
            }
        }
    },
};

// –õ–æ–≥–∏–∫–∞ –≤–∑—è—Ç–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async function takeTransport(interaction, transportId, currentFuel) {
    const memberId = interaction.user.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
    db.get('SELECT * FROM transport WHERE user = ?', [memberId], async (err, row) => {
        if (err) {
            console.error(err);
            return interaction.reply({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ.', ephemeral: true });
        }
        if (row) {
            return interaction.reply({ content: '–í—ã —É–∂–µ –≤–∑—è–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ –µ–≥–æ, –ø—Ä–µ–∂–¥–µ —á–µ–º –±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.', ephemeral: true });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        db.get('SELECT * FROM transport WHERE id = ?', [transportId], async (err, row) => {
            if (err) {
                console.error(err);
                return interaction.reply({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ.', ephemeral: true });
            }
            if (!row) {
                return interaction.reply({ content: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral: true });
            }
            if (row.status !== '–°–≤–æ–±–æ–¥–Ω–∞') {
                return interaction.reply({ content: '–≠—Ç–æ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —É–∂–µ –∑–∞–Ω—è—Ç.', ephemeral: true });
            }

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.run('UPDATE transport SET status = ?, user = ?, fuel = fuel - ?, updatedAt = datetime("now") WHERE id = ?', ['–ó–∞–Ω—è—Ç–æ', memberId, currentFuel, transportId], (err) => {
                if (err) {
                    console.error(err);
                    return interaction.reply({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.', ephemeral: true });
                }

                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª
                interaction.guild.channels.fetch(config.channels.transportLogs).then(logChannel => {
                    logChannel.send({
                        embeds: [new EmbedBuilder()
                            .setColor(0x28A745)
                            .setTitle('–í–∑—è—Ç–∏–µ –º–∞—à–∏–Ω—ã')
                            .addFields(
                                { name: '–ö–µ–º:', value: `<@${memberId}>`, inline: true },
                                { name: '–ê–≤—Ç–æ:', value: row.name, inline: true },
                                { name: '–¢–æ–ø–ª–∏–≤–æ:', value: currentFuel.toString(), inline: true },
                            )
                            .setFooter({ text: new Date().toLocaleString() })
                            .setTimestamp()]
                    });
                });

                updateTransportEmbed(interaction.client);
                interaction.reply({ content: `–í—ã –≤–∑—è–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å "${row.name}" —Å ID ${transportId}.`, ephemeral: true });
            });
        });
    });
}

// –õ–æ–≥–∏–∫–∞ —Å–¥–∞—á–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async function returnTransport(interaction, transportId, currentFuel) {
    const memberId = interaction.user.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å
    db.get('SELECT * FROM transport WHERE id = ? AND user = ?', [transportId, memberId], async (err, row) => {
        if (err) {
            console.error(err);
            return interaction.reply({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ.', ephemeral: true });
        }
        if (!row) {
            return interaction.reply({ content: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å —ç—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç.', ephemeral: true });
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ "–°–≤–æ–±–æ–¥–Ω–æ" –∏ —Å–±—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.run('UPDATE transport SET status = ?, user = NULL, fuel = fuel + ?, updatedAt = datetime("now") WHERE id = ?', ['–°–≤–æ–±–æ–¥–Ω–∞', currentFuel, transportId], (err) => {
            if (err) {
                console.error(err);
                return interaction.reply({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.', ephemeral: true });
            }

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª
            interaction.guild.channels.fetch(config.channels.transportLogs).then(logChannel => {
                logChannel.send({
                    embeds: [new EmbedBuilder()
                        .setColor(0xDC3545)
                        .setTitle('–í–æ–∑–≤—Ä–∞—Ç –º–∞—à–∏–Ω—ã')
                        .addFields(
                            { name: '–ö–µ–º:', value: `<@${memberId}>`, inline: true },
                            { name: '–ê–≤—Ç–æ:', value: row.name, inline: true },
                            { name: '–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ —Ç–æ–ø–ª–∏–≤–∞:', value: currentFuel.toString(), inline: true },
                        )
                        .setFooter({ text: new Date().toLocaleString() })
                        .setTimestamp()]
                });
            });

            updateTransportEmbed(interaction.client);
            interaction.reply({ content: `–í—ã –≤–µ—Ä–Ω—É–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å "${row.name}" —Å ID ${transportId}.`, ephemeral: true });
        });
    });
}

commands\ticket\ticket.js
const { SlashCommandBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const config = require('../../config.json');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('ticket')
        .setDescription('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞'),
    async execute(interaction) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤
        const channel = await interaction.guild.channels.fetch(config.channels.ticketCreationChannel);

        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('create_ticket')
                    .setLabel('–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç')
                    .setStyle(ButtonStyle.Primary),
            );

        const embed = {
            color: 0x0099ff,
            title: '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞',
            description: '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç.',
        };

        await channel.send({ embeds: [embed], components: [row] });

        // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
        await interaction.reply({ content: '–ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª!', ephemeral: true });
    }
};


commands\famq\accept.js
const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const db = require('../../database.js');
const config = require('../../config.json');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('accept')
    .setDescription('–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É'),
  async execute(interaction) {
    const channel = interaction.channel;

    // –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.get(`SELECT * FROM applications WHERE channelId = ?`, [channel.id], async (err, row) => {
      if (err || !row) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', err);
        return interaction.reply('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const user = await interaction.guild.members.fetch(row.userId).catch(() => null);
      if (user) {
        const embed = new EmbedBuilder()
          .setColor(0x28A745)
          .setTitle('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞')
          .setDescription('–î–ª—è –∏–Ω–≤–∞–π—Ç–∞ –≤–∞—Å –≤ —Å–µ–º—å—é —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–µ–º-—Ç–æ –∏–∑ —Å—Ç–∞—Ä—à–µ–≥–æ —Å–æ—Å—Ç–∞–≤–∞.');
        await user.send({ embeds: [embed] });
      }

      // –í—ã–¥–∞—á–∞ —Ä–æ–ª–∏ —Å–µ–º—å–∏
      const familyRole = interaction.guild.roles.cache.get(config.roles.family);
      if (familyRole) {
        await user.roles.add(familyRole);
      }

      // –ü–µ—Ä–µ–Ω–æ—Å –∞–Ω–∫–µ—Ç—ã –≤ –∞—Ä—Ö–∏–≤, –∏—Å–ø–æ–ª—å–∑—É—è id –∫–∞–Ω–∞–ª–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      try {
        const archiveChannel = await interaction.guild.channels.fetch(config.channels.archiveChannelId); // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –ø–æ id

        const archivedEmbed = new EmbedBuilder()
          .setColor(0x28A745)
          .setTitle(`–ü—Ä–∏–Ω—è—Ç–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç ${user.user.username}`)
          .addFields(
            { name: '–ò–º—è —Ñ–∞–º–∏–ª–∏—è (IC)', value: row.nameSurname },
            { name: '–í–∞—à–µ –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç (OOC)', value: row.oocInfo },
            { name: '–í –∫–∞–∫–∏—Ö —Å–µ–º—å—è—Ö —Å–æ—Å—Ç–æ—è–ª–∏ —Ä–∞–Ω–µ–µ', value: row.familyHistory },
            { name: '–í–∞—à —Å—Ä–µ–¥–Ω–∏–π –æ–Ω–ª–∞–π–Ω –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å', value: row.onlineTime },
            { name: '–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –∫ –Ω–∞–º?', value: row.familyReason }
          )
          .setFooter({ text: `–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${interaction.user.username}` })
          .setTimestamp();

        await archiveChannel.send({ embeds: [archivedEmbed] });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∫–µ—Ç—ã –≤ –∞—Ä—Ö–∏–≤:', error);
        return interaction.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É –≤ –∞—Ä—Ö–∏–≤.');
      }

      // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
      await channel.delete();

      // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      db.run(`DELETE FROM applications WHERE channelId = ?`, [channel.id], (err) => {
        if (err) {
          console.error(err);
        }
      });
    });
  }
};


commands\famq\famq.js
const { SlashCommandBuilder } = require('discord.js');
const handleFamq = require('../../handlers/famqHandler');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('famq')
    .setDescription('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ —Å–µ–º—å—é'),
  async execute(interaction, client) {
    await handleFamq(interaction, client);
  }
};

commands\famq\reject.js
const { SlashCommandBuilder, EmbedBuilder, PermissionsBitField } = require('discord.js');
const db = require('../../database');
const config = require('../../config.json');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('reject')
    .setDescription('–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É'),
  async execute(interaction) {
    const channel = interaction.channel;

    // –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.get(`SELECT * FROM applications WHERE channelId = ?`, [channel.id], async (err, row) => {
      if (err || !row) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', err);
        return interaction.reply('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const user = await interaction.guild.members.fetch(row.userId).catch(() => null);
      if (user) {
        const embed = new EmbedBuilder()
          .setColor(0xDC3545)
          .setTitle('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
          .setDescription('–ù–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.');
        await user.send({ embeds: [embed] });
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–∞–Ω–∞–ª–∞ –∞—Ä—Ö–∏–≤–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
      const archiveChannelId = config.channels.archiveChannelId;
      if (!archiveChannelId) {
        return interaction.reply('ID –∫–∞–Ω–∞–ª–∞ –∞—Ä—Ö–∏–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ.');
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –∞—Ä—Ö–∏–≤–∞ –ø–æ ID
      const archiveChannel = await interaction.guild.channels.fetch(archiveChannelId).catch(() => null);
      if (!archiveChannel) {
        return interaction.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –∞—Ä—Ö–∏–≤–∞.');
      }

      const archivedEmbed = new EmbedBuilder()
        .setColor(0xDC3545)
        .setTitle(`–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç ${user.user.username}`)
        .addFields(
          { name: '–ò–º—è —Ñ–∞–º–∏–ª–∏—è (IC)', value: row.nameSurname },
          { name: '–í–∞—à–µ –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç (OOC)', value: row.oocInfo },
          { name: '–í –∫–∞–∫–∏—Ö —Å–µ–º—å—è—Ö —Å–æ—Å—Ç–æ—è–ª–∏ —Ä–∞–Ω–µ–µ', value: row.familyHistory },
          { name: '–í–∞—à —Å—Ä–µ–¥–Ω–∏–π –æ–Ω–ª–∞–π–Ω –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å', value: row.onlineTime },
          { name: '–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –∫ –Ω–∞–º?', value: row.familyReason }
        )
        .setFooter({ text: `–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${interaction.user.username}` })
        .setTimestamp();

      await archiveChannel.send({ embeds: [archivedEmbed] });

      // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
      await channel.delete();

      // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      db.run(`DELETE FROM applications WHERE channelId = ?`, [channel.id], (err) => {
        if (err) {
          console.error(err);
        }
      });
    });
  }
};


commands\famq\rejectfull.js
const { SlashCommandBuilder, EmbedBuilder, PermissionsBitField } = require("discord.js");
const db = require("../../database");
const config = require("../../config.json");

module.exports = {
  data: new SlashCommandBuilder()
    .setName("rejectfull")
    .setDescription("–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É"),
  async execute(interaction) {
    const channel = interaction.channel;

    // –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.get(
      `SELECT * FROM applications WHERE channelId = ?`,
      [channel.id],
      async (err, row) => {
        if (err || !row) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:", err);
          return interaction.reply("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const user = await interaction.guild.members
          .fetch(row.userId)
          .catch(() => null);
        if (user) {
          const embed = new EmbedBuilder()
            .setColor("#DC3545")
            .setTitle("–ó–∞—è–≤–∫–∞ –û—Ç–∫–ª–æ–Ω–µ–Ω–∞")
            .setDescription(
              `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –¢—ã –∫–æ–Ω–µ—á–Ω–æ –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–æ–æ–æ–≤–∞. –ù–æ –ø–æ—à–µ–ª –Ω–∞—Ö—É–π`
            )
            .setImage(
              "https://media1.tenor.com/m/9LdKyZ5g3ikAAAAC/%D0%BE%D1%82%D0%BA%D0%B0%D0%B7%D0%B0%D0%BD%D0%BE.gif"
            )
            .setTimestamp(new Date());
          await user.send({ embeds: [embed] });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –∞—Ä—Ö–∏–≤–∞ –∏–∑ config.json
        const archiveChannelId = config.channels.archiveChannelId;
        const archiveChannel = await interaction.guild.channels.fetch(archiveChannelId).catch(() => null);

        if (!archiveChannel) {
          return interaction.reply("–ö–∞–Ω–∞–ª –∞—Ä—Ö–∏–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.");
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º embed –¥–ª—è –∞—Ä—Ö–∏–≤–∞
        const archivedEmbed = new EmbedBuilder()
          .setColor(0xdc3545)
          .setTitle(`–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç ${user.user.username}`)
          .addFields(
            { name: "–ò–º—è —Ñ–∞–º–∏–ª–∏—è (IC)", value: row.nameSurname },
            { name: "–í–∞—à–µ –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç (OOC)", value: row.oocInfo },
            { name: "–í –∫–∞–∫–∏—Ö —Å–µ–º—å—è—Ö —Å–æ—Å—Ç–æ—è–ª–∏ —Ä–∞–Ω–µ–µ", value: row.familyHistory },
            { name: "–í–∞—à —Å—Ä–µ–¥–Ω–∏–π –æ–Ω–ª–∞–π–Ω –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", value: row.onlineTime },
            { name: "–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –∫ –Ω–∞–º?", value: row.familyReason }
          )
          .setFooter({
            text: `–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${interaction.user.username}`,
          })
          .setTimestamp();

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞
        await archiveChannel.send({ embeds: [archivedEmbed] });

        // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        await channel.delete();

        // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db.run(
          `DELETE FROM applications WHERE channelId = ?`,
          [channel.id],
          (err) => {
            if (err) {
              console.error(err);
            }
          }
        );
      }
    );
  },
};


commands\additional\clear.js
const { SlashCommandBuilder } = require('@discordjs/builders');
const { CommandInteraction, EmbedBuilder } = require('discord.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('clear')
    .setDescription('–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞.')
    .addIntegerOption(option =>
      option.setName('count')
        .setDescription('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
        .setRequired(true)
        .setMinValue(1)
        .setMaxValue(100)),

  async execute(interaction) {
    const count = interaction.options.getInteger('count');

    if (count < 1 || count > 100) {
      return interaction.reply({ content: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç 1 –¥–æ 100.', ephemeral: true });
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    try {
      await interaction.channel.bulkDelete(count, true);

      const embed = new EmbedBuilder()
        .setColor('#FF0000')
        .setTitle('–°–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã')
        .setDescription(`–£–¥–∞–ª–µ–Ω–æ ${count} —Å–æ–æ–±—â–µ–Ω–∏–π.`)
        .setTimestamp();

      return interaction.reply({ embeds: [embed], ephemeral: true });
    } catch (error) {
      console.error(error);
      return interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.', ephemeral: true });
    }
  },
};


commands\additional\infoacademy.js
const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('infoacademy')
        .setDescription('–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∏–Ω—Ç–æ–≤ –∏ –∞–∫–∞–¥–µ–º–∏–∏'),
    async execute(interaction) {
        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π embed —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏
        const pointsEmbed = new EmbedBuilder()
            .setTitle('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∏–Ω—Ç–æ–≤:')
            .setColor(0x0099ff)
            .addFields(
                {
                    name: '–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã:',
                    value: `‚Ä¢ –ú—è—Å–Ω–æ–π –¥–µ–Ω—å (–º—è—Å–æ) - 15 –ø–æ–∏–Ω—Ç–æ–≤\n` +
                        `‚Ä¢ –ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–∞—è —É–±–æ—Ä–∫–∞ (–º—É—Å–æ—Ä) - 20 –ø–æ–∏–Ω—Ç–æ–≤\n` +
                        `‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ–º –≥–∞—Ä–¥–µ—Ä–æ–± (—à–≤–µ–π–∫–∞) - 5 –ø–æ–∏–Ω—Ç–æ–≤\n` +
                        `‚Ä¢ –ë–æ–ª—å—à–æ–π —É–ª–æ–≤ - 30 –ø–æ–∏–Ω—Ç–æ–≤\n` +
                        `‚Ä¢ –õ–æ–º–∞—Ç—å-–Ω–µ —Å—Ç—Ä–æ–∏—Ç—å - 30 –ø–æ–∏–Ω—Ç–æ–≤`,
                    inline: false
                },
                {
                    name: '–î—Ä—É–≥–æ–µ:',
                    value: `‚Ä¢ –ë–∏–∑–≤–∞—Ä (–ù–µ—É–¥–∞—á–Ω–æ) - 5 –ø–æ–∏–Ω—Ç–æ–≤\n` +
                        `‚Ä¢ –ë–∏–∑–≤–∞—Ä (–£–¥–∞—á–Ω–æ) - 10 –ø–æ–∏–Ω—Ç–æ–≤\n` +
                        `‚Ä¢ –ó–∞—Ö–≤–∞—Ç –ö–∞–π–æ-–ü–µ—Ä–∏–∫–æ (–ù–µ—É–¥–∞—á–Ω–æ) - 5 –ø–æ–∏–Ω—Ç–æ–≤\n` +
                        `‚Ä¢ –ó–∞—Ö–≤–∞—Ç –ö–∞–π–æ-–ü–µ—Ä–∏–∫–æ (–£–¥–∞—á–Ω–æ) - 10 –ø–æ–∏–Ω—Ç–æ–≤\n` +
                        `‚Ä¢ –ó–∞ –ª—É—á—à—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –Ω–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—è—â–µ–≥–æ —Å–æ—Å—Ç–∞–≤–∞`,
                    inline: false
                }
            );

        // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π embed —Å –∞–∫–∞–¥–µ–º–∏–µ–π
        const academyEmbed = new EmbedBuilder()
            .setTitle('–ê–∫–∞–¥–µ–º–∏—è')
            .setColor(0x0099ff)
            .addFields(
                {
                    name: '–ü–µ—Ä–µ—Ö–æ–¥ —Å 1 —ç—Ç–∞–ø–∞ –Ω–∞ 2:',
                    value: '‚Ä¢ 75 –±–∞–ª–ª–æ–≤ –ª–∏–±–æ —Å—ã–≥—Ä–∞—Ç—å 10 –±–∏–∑–≤–∞—Ä–æ–≤',
                    inline: false
                },
                {
                    name: '–ü–µ—Ä–µ—Ö–æ–¥ —Å 2 —ç—Ç–∞–ø–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤:',
                    value: '‚Ä¢ –°—ã–≥—Ä–∞—Ç—å 15 –±–∏–∑–≤–∞—Ä–æ–≤ –∏ 250 –±–∞–ª–ª–æ–≤\n‚Ä¢ –°–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é –Ω–∞ Mona',
                    inline: false
                }
            );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–∞ embed-—Å–æ–æ–±—â–µ–Ω–∏—è
        await interaction.reply({
            embeds: [pointsEmbed, academyEmbed]
        });
    }
};

commands\additional\sub.js

const { SlashCommandBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const config = require('../../config.json');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('subscriber')
        .setDescription('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ'),
    async execute(interaction, client) {
        const channelId = config.channels.subscriberChannel; // ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏

        // –°–æ–∑–¥–∞–µ–º embed –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        const embed = {
            color: 0x00FF00,
            title: '–ü–æ–¥–ø–∏—Å–∫–∞',
            description: '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞.',
        };

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('subscribe')
                    .setLabel('–ü–æ–¥–ø–∏—Å–∫–∞')
                    .setStyle(ButtonStyle.Success),
            );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
        const targetChannel = await interaction.guild.channels.fetch(channelId);
        await targetChannel.send({ embeds: [embed], components: [row] });

        await interaction.reply({ content: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.', ephemeral: true });
    },

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    async handleButtonInteraction(interaction) {
        const roleId = config.roles.subscriber;
        const member = interaction.member;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Ä–æ–ª—å
        if (member.roles.cache.has(roleId)) {
            await member.roles.remove(roleId);
            await interaction.reply({ content: '–†–æ–ª—å "–ü–æ–¥–ø–∏—Å—á–∏–∫" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.', ephemeral: true });
        } else {
            await member.roles.add(roleId);
            await interaction.reply({ content: '–†–æ–ª—å "–ü–æ–¥–ø–∏—Å—á–∏–∫" –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.', ephemeral: true });
        }
    }
};


commands\additional\updatefamily.js
const { SlashCommandBuilder } = require('discord.js');
const updateFamilyEmbed = require('../../utils/updateFamilyEmbed');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('updatefamily')
    .setDescription('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ–º—å–∏'),
  async execute(interaction) {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
    try {
      await updateFamilyEmbed(interaction.client);
      await interaction.reply({ content: '–°–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ–º—å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω.', ephemeral: true });
      console.log('–°–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ–º—å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞:', error);
      await interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.', ephemeral: true });
    }
  }
};
