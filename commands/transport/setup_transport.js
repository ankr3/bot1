const {
    SlashCommandBuilder,
    ActionRowBuilder,
    ButtonBuilder,
    ButtonStyle,
    ModalBuilder,
    TextInputBuilder,
    TextInputStyle,
    EmbedBuilder,
    StringSelectMenuBuilder,
} = require('discord.js');
const db = require('../../database');
const updateTransportEmbed = require('../../utils/updateTransportChannel');
const config = require('../../config.json'); // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞ –ª–æ–≥–æ–≤

module.exports = {
    data: new SlashCommandBuilder()
        .setName('setup_transport')
        .setDescription('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞'),

    async execute(interaction) {
        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        const setupRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('add_transport_button')
                    .setLabel('–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('delete_transport_button')
                    .setLabel('–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
                    .setStyle(ButtonStyle.Danger),
            );

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º
        const manageRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('list_transport_button')
                    .setLabel('üìã –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('free_transport_button')
                    .setLabel('üõë –û—Å–≤–æ–±–æ–¥–∏—Ç—å —Ç–µ–∫—É—â–∏–π')
                    .setStyle(ButtonStyle.Danger),
            );

        await interaction.reply({
            content: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π:',
            components: [setupRow],
            ephemeral: true,
        });
    },

    async handleInteraction(interaction) {
        const logChannel = await interaction.client.channels.fetch(config.channels.transportLogs);

        // –†–∞–±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        if (interaction.isButton()) {
            if (interaction.customId === 'add_transport_button') {
                // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                const modal = new ModalBuilder()
                    .setCustomId('add_transport_modal')
                    .setTitle('–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç');

                const nameInput = new TextInputBuilder()
                    .setCustomId('transport_name')
                    .setLabel('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞')
                    .setStyle(TextInputStyle.Short)
                    .setRequired(true);

                const fuelInput = new TextInputBuilder()
                    .setCustomId('transport_fuel')
                    .setLabel('–¢–æ–ø–ª–∏–≤–æ (–º–∞–∫—Å. 45 —Å–∏–º–≤–æ–ª–æ–≤)')
                    .setStyle(TextInputStyle.Short)
                    .setRequired(true)
                    .setMaxLength(45);

                modal.addComponents(
                    new ActionRowBuilder().addComponents(nameInput),
                    new ActionRowBuilder().addComponents(fuelInput)
                );

                await interaction.showModal(modal);
            } else if (interaction.customId === 'delete_transport_button') {
                // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                const modal = new ModalBuilder()
                    .setCustomId('delete_transport_modal')
                    .setTitle('–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç');

                const idInput = new TextInputBuilder()
                    .setCustomId('transport_id')
                    .setLabel('ID —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞')
                    .setStyle(TextInputStyle.Short)
                    .setRequired(true);

                modal.addComponents(new ActionRowBuilder().addComponents(idInput));
                await interaction.showModal(modal);
            } else if (interaction.customId === 'list_transport_button') {
                // –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
                db.all('SELECT * FROM transport', [], async (err, rows) => {
                    if (err) {
                        console.error(err);
                        return interaction.reply({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.', ephemeral: true });
                    }

                    const options = rows.map(transport => ({
                        label: `${transport.status === '–°–≤–æ–±–æ–¥–Ω–∞' ? '‚úÖ' : '‚ùå'} ${transport.name}`,
                        description: `–°—Ç–∞—Ç—É—Å: ${transport.status}`,
                        value: transport.id.toString(),
                    }));

                    const selectMenu = new StringSelectMenuBuilder()
                        .setCustomId('select_transport')
                        .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å')
                        .addOptions(options);

                    const row = new ActionRowBuilder().addComponents(selectMenu);

                    interaction.reply({ content: '–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', components: [row], ephemeral: true });
                });
            } else if (interaction.customId === 'free_transport_button') {
                // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–¥–∞—á–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                const modal = new ModalBuilder()
                    .setCustomId('free_transport_modal')
                    .setTitle('–°–¥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å')
                    .addComponents(
                        new ActionRowBuilder().addComponents(
                            new TextInputBuilder()
                                .setCustomId('fuel_amount')
                                .setLabel('–í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–ø–ª–∏–≤–∞')
                                .setStyle(TextInputStyle.Short)
                                .setRequired(true)
                        )
                    );

                await interaction.showModal(modal);
            }
        } else if (interaction.isStringSelectMenu()) {
            if (interaction.customId === 'select_transport') {
                // –í—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –≤–∑—è—Ç–∏—è
                const selectedId = interaction.values[0];
                db.get('SELECT * FROM transport WHERE id = ?', [selectedId], async (err, row) => {
                    if (err || !row) {
                        return interaction.reply({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.', ephemeral: true });
                    }

                    if (row.status !== '–°–≤–æ–±–æ–¥–Ω–∞') {
                        return interaction.reply({ content: '–≠—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –∑–∞–Ω—è—Ç.', ephemeral: true });
                    }

                    const userId = interaction.user.id;
                    db.get('SELECT * FROM transport WHERE user = ?', [userId], (err, userTransport) => {
                        if (err) {
                            return interaction.reply({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–Ω—è—Ç—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.', ephemeral: true });
                        }

                        if (userTransport) {
                            return interaction.reply({ content: '–°–¥–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–µ—Ä–µ–¥ –≤–∑—è—Ç–∏–µ–º –Ω–æ–≤–æ–≥–æ.', ephemeral: true });
                        }

                        const modal = new ModalBuilder()
                            .setCustomId(`take_transport_modal_${selectedId}`)
                            .setTitle('–í–∑—è—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å')
                            .addComponents(
                                new ActionRowBuilder().addComponents(
                                    new TextInputBuilder()
                                        .setCustomId('fuel_amount')
                                        .setLabel('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞')
                                        .setStyle(TextInputStyle.Short)
                                        .setRequired(true)
                                )
                            );

                        interaction.showModal(modal);
                    });
                });
            }
        } else if (interaction.isModalSubmit()) {
            // –õ–æ–≥–∏–∫–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
            if (interaction.customId === 'add_transport_modal') {
                const name = interaction.fields.getTextInputValue('transport_name');
                const fuel = parseInt(interaction.fields.getTextInputValue('transport_fuel'), 10);

                if (isNaN(fuel) || fuel < 0) {
                    return interaction.reply({ content: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–∞.', ephemeral: true });
                }

                db.run('INSERT INTO transport (name, fuel, status) VALUES (?, ?, ?)', [name, fuel, '–°–≤–æ–±–æ–¥–Ω–∞'], function (err) {
                    if (err) {
                        console.error(err);
                        return interaction.reply({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.', ephemeral: true });
                    }

                    updateTransportEmbed(interaction.client);
                    interaction.reply({ content: `–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç "${name}" –¥–æ–±–∞–≤–ª–µ–Ω.`, ephemeral: true });
                });
            } else if (interaction.customId === 'delete_transport_modal') {
                const transportId = parseInt(interaction.fields.getTextInputValue('transport_id'), 10);

                db.run('DELETE FROM transport WHERE id = ?', [transportId], function (err) {
                    if (err) {
                        console.error(err);
                        return interaction.reply({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.', ephemeral: true });
                    }

                    updateTransportEmbed(interaction.client);
                    interaction.reply({ content: `–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å ID ${transportId} —É–¥–∞–ª—ë–Ω.`, ephemeral: true });
                });
            } else if (interaction.customId.startsWith('take_transport_modal_')) {
                const transportId = parseInt(interaction.customId.split('_').pop(), 10);
                const fuel = parseInt(interaction.fields.getTextInputValue('fuel_amount'), 10);
                const userId = interaction.user.id;

                db.get('SELECT * FROM transport WHERE id = ?', [transportId], (err, transport) => {
                    if (err || !transport) {
                        return interaction.reply({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.', ephemeral: true });
                    }

                    db.run('UPDATE transport SET status = ?, user = ?, fuel = ? WHERE id = ?', ['–ó–∞–Ω—è—Ç–æ', userId, fuel, transportId], async (err) => {
                        if (err) {
                            console.error(err);
                            return interaction.reply({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.', ephemeral: true });
                        }

                        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
                        const takeEmbed = new EmbedBuilder()
                            .setColor(0x28A745) // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
                            .setTitle('–ê–≤—Ç–æ–º–æ–±–∏–ª—å –∑–∞–Ω—è—Ç')
                            .addFields(
                                { name: '–ö–µ–º –∑–∞–Ω—è—Ç:', value: `<@${userId}>`, inline: true },
                                { name: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å:', value: transport.name, inline: true },
                                { name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞:', value: `${fuel}`, inline: true }
                            )
                            .setTimestamp();

                        await logChannel.send({ embeds: [takeEmbed] });

                        interaction.reply({ content: `–í—ã –≤–∑—è–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç "${transport.name}" —Å —Ç–æ–ø–ª–∏–≤–æ–º: ${fuel}.`, ephemeral: true });
                        updateTransportEmbed(interaction.client);
                    });
                });
            } else if (interaction.customId === 'free_transport_modal') {
                const fuelAmount = parseInt(interaction.fields.getTextInputValue('fuel_amount'), 10);
                const userId = interaction.user.id;

                if (isNaN(fuelAmount) || fuelAmount < 0) {
                    return interaction.reply({ content: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–∞.', ephemeral: true });
                }

                db.get('SELECT * FROM transport WHERE user = ?', [userId], (err, transport) => {
                    if (err || !transport) {
                        return interaction.reply({ content: '–£ –≤–∞—Å –Ω–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è —Å–¥–∞—á–∏.', ephemeral: true });
                    }

                    db.run('UPDATE transport SET status = ?, user = NULL, fuel = ? WHERE id = ?', ['–°–≤–æ–±–æ–¥–Ω–∞', fuelAmount, transport.id], async (err) => {
                        if (err) {
                            console.error(err);
                            return interaction.reply({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.', ephemeral: true });
                        }

                        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
                        const logChannel = await interaction.client.channels.fetch(config.channels.transportLogs);
                        const freeEmbed = new EmbedBuilder()
                            .setColor(0xF1C40F) // –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
                            .setTitle('–ê–≤—Ç–æ–º–æ–±–∏–ª—å –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω')
                            .addFields(
                                { name: '–ö–µ–º –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω:', value: `<@${userId}>`, inline: true },
                                { name: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å:', value: transport.name, inline: true },
                                { name: '–û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–ø–ª–∏–≤–∞:', value: `${fuelAmount}`, inline: true }
                            )
                            .setTimestamp();

                        await logChannel.send({ embeds: [freeEmbed] });

                        interaction.reply({ content: `–í—ã —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç "${transport.name}" —Å –æ—Å—Ç–∞—Ç–∫–æ–º —Ç–æ–ø–ª–∏–≤–∞: ${fuelAmount}.`, ephemeral: true });
                        updateTransportEmbed(interaction.client);
                    });
                });
            }
        }
    },
};
